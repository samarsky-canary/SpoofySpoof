@page "/Zadanie4"
@using System.Threading
@using GraphLab.Core
@using GraphLab.Core.Algorithms
@using GraphLab.Core.Algorithms.Search
@using GraphLab.Core.Algorithms.Utils

<div id="graph" style="height:60vh"></div>

<button @onclick="RunDeikstra">Алгоритм Дейкстры</button>

<button @onclick="RunBellmanFord">Алгоритм Беллмана-Форда</button>

<button @onclick="NextStep" disabled="@(CurrentStep == null || paintList == true)">Следующий шаг</button>

<div id="graph-matrix">
    @if (paintList)
    {
        <ForBellmanFord Cities="@ModelService.Graph.Verticies" list="@listLeng"></ForBellmanFord>
    }

</div>

@code {
    [Inject]
    public ModelService ModelService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public bool paintList { get; set; }

    public List<List<int>> listLeng { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            ModelService.Generate(7, true, 1, 10);
            await JSRuntime.BindGraph(ModelService.Graph, true);
        }
        else
        {
            foreach (var vertex in ModelService.Graph.Verticies)
            {
                await JSRuntime.UpdateVertex(vertex,
                    (Algorithm?.States != null) ? Algorithm.States[vertex] : SearchState.None, true);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Алгоритм поиска
    /// </summary>
    public ISearchAlgorithm<City, Road> Algorithm { get; private set; }

    /// <summary>
    /// Текущий шаг алгоритма
    /// </summary>
    public AlgorithmStep CurrentStep { get; private set; }


    protected void RunDeikstra()
    {
        paintList = false;
        Algorithm = new AlgDeikstra<City, Road>(
            ModelService.Graph,
            ModelService.Graph.Verticies.First());

        CurrentStep = Algorithm.Begin();
    }

    protected void RunBellmanFord()
    {
        AlgBellmanFord<City, Road> p = new AlgBellmanFord<City, Road>(ModelService.Graph);
        listLeng = p.Begin();
        StateHasChanged();
        paintList = true;
    }

    /// <summary>
    /// Переход к следующему шагу алгоритма
    /// </summary>
    protected void NextStep()
    {
        CurrentStep = CurrentStep();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        listLeng = null;
        paintList = false;
        await base.OnInitializedAsync();
    }


}
